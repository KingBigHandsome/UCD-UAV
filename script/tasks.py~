#!/usr/bin/env python

# import ROS libraries
import rospy
import mavros
import mavros.utils;
import mavros.setpoint
import mavros.command
import mavros_msgs.msg
import mavros_msgs.srv
import time
import serial
import thread
import abc
import datetime

import state
import ipcs
import setpoint

class TaskManager(object):
    def __init__(self, other=None):
        setXYZ(0,0,3)
        self.tasks = []

    def add(self, task):
        self.tasks.append(task)

    def run(self):
        for i in range(0,len(self.tasks)):
            self.tasks[i].execute()

class Task(object):
    def __init__(self):
        self.rate = rospy.Rate(1000)

    def execute(self):
        while(not self.__done__()):
            self.keepalive()
            self.__execute__()
            time.sleep(0.010)

    def keepalive(self):
        setpoint_msg = mavros.setpoint.PoseStamped(
            header=mavros.setpoint.Header(
                frame_id="att_pose",
                stamp=rospy.Time.now()),
            )
        setpoint_msg.pose.position.x = setpoint.x
        setpoint_msg.pose.position.y = setpoint.y
        setpoint_msg.pose.position.z = setpoint.z
        SETPOINT_LOCAL_PUB.publish(setpoint_msg)

    @abc.abstractmethod
    def __execute__(self):
        return True

    @abc.abstractmethod
    def __done__(self):
        return False

class InitTask(Task):
    def __init__(self):
        Task.__init__(self)
        self.count = 0
    
    def __execute__(self):
        pass

    def __done__(self):
        self.count+=1
        if(self.count>50 and UAV_state.connected): # wait for FCU connection
            return True
        else:
            return False

class Arm(Task):
    def __init__(self):
        Task.__init__(self)
    
    def __execute__(self):
        mavros.command.arming(True)

    def __done__(self):
        if(UAV_state.armed):
            print 'Vehicle Armed'
            return True
        else:
            return False

class ChangeMode(Task):
    def __init__(self, mode):
        Task.__init__(self)
        self.mode = mode
    
    def __execute__(self):
        from state import set_mode
        set_mode(0,self.mode)

    def __done__(self):
        if(UAV_state.mode == self.mode ):
            print 'Mode Changed'
            return True
        else:
            return False
        

class GoToLocal(Task):
    def __init__(self, setpoint, precision=0.1):
        Task.__init__(self)
        self.precision = precision

    def __execute__(self):
        pass

    def __done__(self):
        if (abs(curpoint.x-setpoint.x) < self.precision and
            abs(curpoint.y-setpoint.y) < self.precision and
            abs(curpoint.z-setpoint.z) < self.precision):
            print "Point reached!"
            return True
        else:
            return False


class Stay(Task):
    def __init__(self, duration = 0):
        Task.__init__(self)
        self.start = rospy.Time.now()
        self.duration = duration

    def __execute__(self):
        pass

    def __done__(self):
        if (rospy.Time.now() - self.start > rospy.Duration(self.duration)):
            print "Done staying!"
            return True
        else:
            return False


class GoToGPS(Task):
    '''
    This is task that guide the UAV to GPS position
    '''
    pass

class GetData(Task):
    def __init__(self):
        pass
